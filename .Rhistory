axis(side=2, at=seq(0,1,0.5), labels=seq(0,1,0.5),cex.axis=1.5)
axis(side=1, at=seq(0,nSubj,nSubj), labels=seq(0,nSubj,nSubj), cex.axis=1.5)
par(xpd=TRUE) # lets plot legend be drawn outside of plot area
legend("bottom",
legend = groupNames,
col = colours,
pch = 15,
#horiz = T,
cex = .7,
inset = inset,
ncol = 2) #' @returns a stacked bar plot
}
source(here("compareMM-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
MMComparisonPlot(
wmc_AIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
groupNames = c("1 param models", "2 param models")
)
mtext("AIC", side = 3, line = 1)
MMComparisonPlot(
wmc_BIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(-0.5,-5)
)
mtext("BIC", side = 3, line = 1)
source(here("weighted-ICs.R"))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(gridExtra)
source(here("modelling/evansetal-18/08_param-plot-functions.R"))
load(here("data/evansetal-18/derived/allAIC.Rdata"))
allAIC[,-1]
bestAIC =apply(allAIC[,-1],1,which.min)
bestAIC
load(here("data/evansetal-18/derived/allBIC.Rdata"))
allBIC[,-1]
bestBIC = apply(allBIC[,-1],1,which.min)
bestBIC
source(here("weighted-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
wmc_AIC = weightedIC(allAIC[,2:length(allAIC)])
plotWMC_AIC = plotWeightedICs(wmc_AIC, seed = 115,inset = -.29)
mtext("AIC", side = 3, line = 1)
wmc_BIC = weightedIC(allBIC[,2:length(allBIC)])
plotWMC_BIC = plotWeightedICs(wmc_BIC, seed = 115,inset = -.6)
mtext("BIC", side = 3, line = 1)
source(here("compareMM-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
MMComparisonPlot(
wmc_AIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
groupNames = c("1 param models", "2 param models")
)
mtext("AIC", side = 3, line = 1)
MMComparisonPlot(
wmc_BIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(-0.5,-5)
)
mtext("BIC", side = 3, line = 1)
# what were the best single models
bestAICsingle = apply(allAIC[,-c(1,12)],1,which.min)
bestAICsingle
# what were the best single models
bestBICsingle = apply(allBIC[,-c(1,12)],1,which.min)
bestBICsingle
# what was the second best model?
secBestAICsingle = apply(allAIC[,-c(1,11,12)],1,which.min)
secBestAICsingle
secBestBICsingle = apply(allBIC[,-c(1,11,12)],1,which.min)
secBestBICsingle
# what was the best a model?
best_a_AICsingle = apply(allAIC[,2:6],1,which.min)
best_a_AICsingle
best_a_BICsingle = apply(allBIC[,2:6],1,which.min)
best_a_BICsingle
# what was the next best a model?
secBest_a_AICsingle = apply(allAIC[,c(2,3,5,6)],1,which.min)
secBest_a_AICsingle
secBest_a_BICsingle = apply(allBIC[,c(2,3,5,6)],1,which.min)
secBest_a_BICsingle
bestA = c("a_exp", "a_pow")
bestB = c("v_delayed_exp","v-delayed-pow")
expand.grid(bestA,bestB)
source(here("modelling/evansetal-18/08_param-plot-functions.R"))
v_a_exp_thresh = thresholdPlot("v-a-exp", as.numeric(names(bestBIC[bestBIC == 12])))
v_a_exp_drift = driftPlot("v-a-exp", as.numeric(names(bestBIC[bestBIC == 12])))
gridExtra::grid.arrange(v_a_exp_drift,v_a_exp_thresh, top = "Participants Best Fit by Exponential Threshold + Drift Model")
v_simple = driftPlot("simple",as.numeric(names(bestBIC[bestBIC == 4])))
a_exp = thresholdPlot("a-exp",as.numeric(names(bestBIC[bestBIC == 4])))
gridExtra::grid.arrange(v_simple, a_exp, top = "Participants Best Fit by Exponential Threshold Model")
a_power = thresholdPlot("a-power",as.numeric(names(bestBIC[bestBIC == 3])))
gridExtra::grid.arrange(v_simple, a_power, top = "Participants Best Fit by Power Threshold Model")
a_simple = thresholdPlot("simple",as.numeric(names(bestBIC[bestBIC == 7])))
v_linear = driftPlot("v-linear",as.numeric(names(bestBIC[bestBIC == 7])))
gridExtra::grid.arrange(v_linear, a_simple, top = "Participants Best Fit by Linear Drift Rate Model")
bestAIC
bestBIC
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_a(1,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(2,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(3,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(4,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(5,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(6,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(7,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(8,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(9,models = c("simple","a-linear","a-power","a-exp"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_v(1,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(2,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(3,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(4,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(5,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(6,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(7,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(8,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(9,models = c("simple","v-linear","v-power","v-a-exp"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_a(1,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(2,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(3,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(4,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(5,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(6,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(7,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(8,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(9,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_v(1,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(2,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(3,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(4,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(5,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(6,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(7,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(8,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(9,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
source(here("modelling/evansetal-18/11_model-fits.R"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,4))
plotQuantiles(allSimQuantiles[[models[1]]])
plotQuantiles(allSimQuantiles[[models[2]]])
plotQuantiles(allSimQuantiles[[models[3]]])
plotQuantiles(allSimQuantiles[[models[4]]])
plotQuantiles(allSimQuantiles[[models[5]]])
plotQuantiles(allSimQuantiles[[models[6]]])
plotQuantiles(allSimQuantiles[[models[7]]])
plotQuantiles(allSimQuantiles[[models[8]]])
plotQuantiles(allSimQuantiles[[models[9]]])
plotQuantiles(allSimQuantiles[[models[10]]])
plotQuantiles(allSimQuantiles[[models[11]]])
plotQuantiles(allSimQuantiles[[models[12]]])
allBIC[,-1]
bestAIC =apply(allAIC[,-1],1,which.min)
allAIC[,-1]
load(here("data/evansetal-18/derived/allAIC.Rdata"))
allAIC[,-1]
bestAIC
bestAIC =apply(allAIC[,-1],1,which.min)
bestAIC
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
library(here)
setwd(/Users/manikya_alister/cloudstor/ParAcT)
setwd("/Users/manikya_alister/cloudstor/ParAcT")
library(here)
here()
here::i_am()
here::i_am(/Users/manikya_alister/cloudstor/ParAcT)
here::i_am("/Users/manikya_alister/cloudstor/ParAcT")
here::here()
here::set_here("/Users/manikya_alister/cloudstor/ParAcT")
here()
getwd
getwd()
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
use.LHS=randomLHS(n=100, k=6) # = n params
colnames(use.LHS)=c("v.start","v.asym", "v.rate", # v. center/change params? Maybe not because we're not looking at diffs across conditions
"b","t0.centre","t0.change","z")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
View(genParams)
View(genParams)
View(use.LHS)
View(use.range)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
length(conds)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
View(genParams)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
View(genParams)
View(data)
View(genParams)
View(use.LHS)
View(use.range)
View(genParams)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
View(tmp)
View(genParams)
here()
detach("package:here", unload = TRUE)
library(here)
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
View(data)
View(genParams)
View(data)
View(genParams)
rm(list = ls())
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
View(data)
View(weight)
View(prior)
data[["Time"]]
View(genParams)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
View(data)
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
View(data)
data[["Time"]]
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
allGenParams=NULL
allMeanTheta=NULL
#Define how many data sets to use
n = 100
model = "v-exp"
for (p in 1:n) { #Loop in each data set
load(paste0("Fits_recovery/P",p,"_",model,".RData"))
#load(paste0("Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
View(allGenParams)
View(allMeanTheta)
theta
library(here)
setwd("Recovery")
getwd
getwd()
#When in the same working directory as the C code, this line will compile the code (first time usage, like installing a package)
system("R CMD SHLIB DIFF_trialVarying.c") # <--- Make sure to run this first before trying to source
source("~/cloudstor/ParAcT/Recovery/01_sim.R")
source("~/cloudstor/ParAcT/Recovery/01_sim.R")
getwd()
source("~/cloudstor/ParAcT/Recovery/01_sim.R")
dyn.load("DIFF_trialVarying.so")
rm(list=ls())
source("~/cloudstor/ParAcT/Recovery/01_sim.R")
#setwd("Recovery")
library(msm)
source("02_simulate-DIFF.R")
source("~/cloudstor/ParAcT/Recovery/01_sim.R")
source("02_simulate-DIFF-trialVarying.R")
library(lhs)
nParams = 7
#When in the same working directory as the C code, this line will compile the code (first time usage, like installing a package)
system("R CMD SHLIB DIFF_trialVarying.c") # <--- Make sure to run this first before trying to source
use.LHS=randomLHS(n=100, k=nParams) # = n params
colnames(use.LHS)=c("v.start","v.asym", "v.rate", # v. center/change params? Maybe not because we're not looking at diffs across conditions
"a","t0.centre","t0.change","z")
use.range=array(NA,c(nParams,2)) #c(nparams, 2)
rownames(use.range)=c("v.start","v.asym", "v.rate", # v. center/change models
"a","t0.centre","t0.change","z")
colnames(use.range)=c("Min","Max")
use.range["v.start",]=c(0.1,4)
use.range["v.asym",]=c(0.1,4)
View(use.range)
use.range["v.rate",]=c(0.1,1)
use.range["a",]=c(0.9,3.5)
use.range["t0",]=c(0.1,0.6)
View(use.range)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
rm(list = ls())
library(here)
setwd(here())
setwd("Recovery")
getwd
getwd()
allGenParams=NULL
allMeanTheta=NULL
#Define how many data sets to use
n = 100
model = "v-exp"
for (p in 1:n) { #Loop in each data set
load(paste0("Fits_recovery/P",p,"_",model,".RData"))
load(paste0("Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
allGenParams= as.data.frame(allGenParams)
allMeanTheta= as.data.frame(allMeanTheta)
cor(allGenParams$v.start, allMeanTheta$v.start)
cor(allGenParams$v.asym, allMeanTheta$v.asym)
cor(allGenParams$v.rate, allMeanTheta$v.rate)
cor(allGenParams$a, allMeanTheta$a)
cor(allGenParams$ter, allMeanTheta$t0)
View(allGenParams)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
setwd("ParAcT")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
rm(list = ls())
library(here)
setwd(here())
allGenParams=NULL
allMeanTheta=NULL
#Define how many data sets to use
n = 100
model = "v-exp"
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/Fits_recovery/P",p,"_",model,".RData"))
load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
allGenParams= as.data.frame(allGenParams)
allMeanTheta= as.data.frame(allMeanTheta)
cor(allGenParams$v.start, allMeanTheta$v.start)
cor(allGenParams$v.asym, allMeanTheta$v.asym)
cor(allGenParams$v.rate, allMeanTheta$v.rate)
cor(allGenParams$a, allMeanTheta$a)
cor(allGenParams$ter, allMeanTheta$t0)
View(allGenParams)
View(allMeanTheta)
allGenParams=NULL
allMeanTheta=NULL
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/Fits_recovery/P",p,"_",model,".RData"))
#load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
View(allGenParams)
View(allMeanTheta)
load("~/cloudstor/ParAcT/Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-1.Rdata")
load("~/cloudstor/ParAcT/Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-2.Rdata")
load("~/cloudstor/ParAcT/Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-3.Rdata")
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/Fits_recovery/P",p,"_",model,".RData"))
load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
View(allGenParams)
allGenParams=NULL
allMeanTheta=NULL
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/Fits_recovery/P",p,"_",model,".RData"))
load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
View(allGenParams)
load("~/cloudstor/ParAcT/Recovery/Fits_recovery/P1_v-exp.Rdata")
View(genParams)
load("~/cloudstor/ParAcT/Recovery/Fits_recovery/P2_v-exp.Rdata")
View(genParams)
load("~/cloudstor/ParAcT/Recovery/Fits_recovery/P3_v-exp.Rdata")
rm(list=ls())
useSub = 1
load(paste("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",useSub,".Rdata",sep=""))
View(genParams)
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
rm(list = ls())
library(here)
setwd(here())
allGenParams=NULL
allMeanTheta=NULL
#Define how many data sets to use
n = 100
model = "v-exp"
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/Fits_recovery/P",p,"_",model,".RData"))
load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
allGenParams= as.data.frame(allGenParams)
allMeanTheta= as.data.frame(allMeanTheta)
cor(allGenParams$v.start, allMeanTheta$v.start)
cor(allGenParams$v.asym, allMeanTheta$v.asym)
cor(allGenParams$v.rate, allMeanTheta$v.rate)
cor(allGenParams$a, allMeanTheta$a)
cor(allGenParams$ter, allMeanTheta$t0)
allGenParams=NULL
allMeanTheta=NULL
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/Fits_recovery/P",p,"_",model,".RData"))
#load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
load("~/cloudstor/ParAcT/Recovery/Fits_recovery/P1_v-exp.Rdata")
rm(list = ls())
load("~/cloudstor/ParAcT/Recovery/Fits_recovery/P1_v-exp.Rdata")
load("~/cloudstor/ParAcT/Recovery/Fits_recovery/P2_v-exp.Rdata")
apply(theta,2,mean)
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_v-a-exp.Rdata")
apply(theta,2,mean)
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_v-exp.Rdata")
apply(theta,2,mean)
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P2_v-exp.Rdata")
apply(theta,2,mean)
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P2_v-exp.Rdata")
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P3_v-exp.Rdata")
apply(theta,2,mean)
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
here())
here()
useSub
source("~/cloudstor/ParAcT/Recovery/06_runDiffModel_complex_recovery.R")
