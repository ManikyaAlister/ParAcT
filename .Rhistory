par(mfrow = c(2,2))
singleParticipant_v(participant = 10, models = "v-exp", params = "generated")
singleParticipant_v(participant = 10, models = "v-exp", params = "estimated")
singleParticipant_v(participant = 20, models = "v-exp", params = "generated")
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated")
par(mfrow = c(2,2))
singleParticipant_v(participant = 20, models = "v-exp", params = "generated")
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated")
singleParticipant_v(participant = 20, models = "v-exp", params = "generated")
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated")
par(mfrow = c(2,2))
singleParticipant_v(participant = 20, models = "v-exp", params = "generated")
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated")
singleParticipant_v(participant = 30, models = "v-exp", params = "generated")
singleParticipant_v(participant = 30, models = "v-exp", params = "estimated")
singleParticipant_v(participant = 20, models = "v-exp", params = "generated", ymin = 2, ymax =6)
par(mfrow = c(2,2))
singleParticipant_v(participant = 20, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated", ymin = 2, ymax =6)
singleParticipant_v(participant = 30, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 30, models = "v-exp", params = "estimated", ymin = 2, ymax =6)
par(mfrow = c(2,2))
singleParticipant_v(participant = 20, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated")
singleParticipant_v(participant = 30, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 30, models = "v-exp", params = "estimated")
colnames(allMeanTheta)
correlations = c(
cor(allGenParams$a, allMeanTheta$a),
cor(allGenParams$ter, allMeanTheta$t0),
cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$v.start, allMeanTheta$v.start),
cor(allGenParams$v.asym, allMeanTheta$v.asym),
cor(allGenParams$v.rate, allMeanTheta$v.rate)
)
names(correlations) = colnames(allMeanTheta)
correlations
load("~/cloudstor/ParAcT/data/evansetal-18/clean/P1.Rdata")
View(data)
source("~/cloudstor/ParAcT/Recovery/v-exp/01_sim_1.R")
source("~/cloudstor/ParAcT/Recovery/v-exp/01_sim_1.R")
View(genParams)
source("~/cloudstor/ParAcT/Recovery/a-exp/01_sim_a-exp.R")
source("~/cloudstor/ParAcT/Recovery/a-exp/01_sim_a-exp.R")
load("~/cloudstor/ParAcT/Recovery/a-exp/Datasets/RECOVERY_DATA-DIFF_LHS-90.Rdata")
View(genParams)
load("~/cloudstor/ParAcT/Recovery/v-exp/Fits_recovery/P1_v-exp.Rdata")
View(genParams)
apply(theta,2,mean)
source("~/cloudstor/ParAcT/Recovery/a-exp/01_sim_a-exp.R")
source("~/cloudstor/ParAcT/Recovery/a-exp/06_runDiffModel_a-exp_recovery.R")
source("~/cloudstor/ParAcT/Recovery/a-exp/06_runDiffModel_a-exp_recovery.R")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(here)
setwd(here())
# Set up empty data frames for generated parameters (allGenParamas) and estimated parameters (allMeanTheta)
allGenParams=NULL
allMeanTheta=NULL
#Define how many data sets to use
n = 100
model = "v-exp"
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/",model,"/Fits_recovery/P",p,"_",model,".RData"))
#load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
allGenParams= as.data.frame(allGenParams)
allMeanTheta= as.data.frame(allMeanTheta)
correlations = c(
cor(allGenParams$a, allMeanTheta$a),
cor(allGenParams$ter, allMeanTheta$t0),
cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$v.start, allMeanTheta$v.start),
cor(allGenParams$v.asym, allMeanTheta$v.asym),
cor(allGenParams$v.rate, allMeanTheta$v.rate)
)
correlations = c(
cor(allGenParams$a, allMeanTheta$a),
cor(allGenParams$ter, allMeanTheta$t0),
#cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$v.start, allMeanTheta$v.start),
cor(allGenParams$v.asym, allMeanTheta$v.asym),
cor(allGenParams$v.rate, allMeanTheta$v.rate)
)
View(allGenParams)
View(allMeanTheta)
View(allGenParams)
View(allMeanTheta)
load("~/cloudstor/ParAcT/Recovery/v-exp/Fits_recovery/P1_v-exp.Rdata")
View(allGenParams)
View(allMeanTheta)
View(allGenParams)
source("~/cloudstor/ParAcT/Recovery/a-exp/06_runDiffModel_a-exp_recovery.R")
source("~/cloudstor/ParAcT/Recovery/v-exp/run-parallel/06_runDiffModel_complex_recovery1-10.R")
source("~/cloudstor/ParAcT/Recovery/v-exp/run-parallel/06_runDiffModel_complex_recovery1-10.R")
source("~/cloudstor/ParAcT/Recovery/v-exp/run-parallel/06_runDiffModel_complex_recovery1-10.R")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(here)
setwd(here())
# Set up empty data frames for generated parameters (allGenParamas) and estimated parameters (allMeanTheta)
allGenParams=NULL
allMeanTheta=NULL
#Define how many data sets to use
n = 100
model = "v-exp"
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/",model,"/Fits_recovery/P",p,"_",model,".RData"))
#load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
allGenParams= as.data.frame(allGenParams)
allMeanTheta= as.data.frame(allMeanTheta)
correlations = c(
cor(allGenParams$a, allMeanTheta$a),
cor(allGenParams$ter, allMeanTheta$t0),
#cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$v.start, allMeanTheta$v.start),
cor(allGenParams$v.asym, allMeanTheta$v.asym),
cor(allGenParams$v.rate, allMeanTheta$v.rate)
)
names(correlations) = colnames(allMeanTheta)
correlations
par(mfrow = c(2,3))
plot(allGenParams$v.start, allMeanTheta$v.start, ylab = "Estimated", xlab = "Generated", main = "v.start")
plot(allGenParams$v.asym, allMeanTheta$v.asym, ylab = "Estimated", xlab = "Generated", main = "v.asym")
plot(allGenParams$v.rate, allMeanTheta$v.rate, ylab = "Estimated", xlab = "Generated", main = "v.rate")
plot(allGenParams$a, allMeanTheta$a, ylab = "Estimated", xlab = "Generated", main = "a")
plot(allGenParams$ter, allMeanTheta$t0, ylab = "Estimated", xlab = "Generated", main = "t0")
plot(allGenParams$z, allMeanTheta$z, ylab = "Estimated", xlab = "Generated", main = "z")
singleParticipant_v = function(participant,
trials = 1000,
ymin = 0,
ymax = 4,
models = c(
"simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp",
"v-delayed-pow",
"v-delayed-exp",
"v-a-exp"
),
params,
title = "") {
plot(-1,-1,ylim = c(ymin,ymax),xlab = "trial",ylab = "v", xlim = c(0,trials), main = title)
for(model in models){
load(here(paste("Recovery/v-exp/Fits_recovery/P", participant,"_",model,".Rdata", sep = "")))
if (params == "generated"){
x = as.vector(genParams)
names(x) = rownames(genParams)
} else if (params == "estimated"){
x =  apply(theta, 2, mean)
}
if (model == "v-power"){
drift = (x["v.asym"]+x["v.start"])-x["v.start"]*data$Trial^(-x["v.rate"])
} else if (model == "v-exp" | model == "v-a-exp"){
drift = (x["v.asym"]+x["v.start"])-x["v.start"]*exp(-x["v.rate"]*data$Trial)
} else if (model == "v-linear"){
drift = (x["v.b"]*data$Trial)+x["v.c"]
} else if (model == "simple") {
drift = rep(x["a"],length(data$Trial))
} else if (model == "v-delayed-pow"){
drift = (x["v.asym"]+x["v.start"])-x["v.start"]*((x["v.delay"]+1)/(x["v.delay"]+data$Trial^(x["v.rate"])))
} else if (model == "v-delayed-exp"){
drift = (x["v.asym"]+x["v.start"])-x["v.start"]*((x["v.delay"]+1)/(x["v.delay"]+exp(x["v.rate"]*data$Trial)))
}
lines(data$Trial,drift)
}
}
par(mfrow = c(2,2))
singleParticipant_v(participant = 1, models = "v-exp", params = "generated", title = "Generated")
singleParticipant_v(participant = 1, models = "v-exp", params = "estimated", title = "Estimated")
singleParticipant_v(participant = 2, models = "v-exp", params = "generated")
singleParticipant_v(participant = 2, models = "v-exp", params = "estimated")
par(mfrow = c(2,2))
singleParticipant_v(participant = 20, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated")
singleParticipant_v(participant = 30, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 30, models = "v-exp", params = "estimated")
par(mfrow = c(2,2))
singleParticipant_v(participant = 1, models = "v-exp", params = "generated", title = "Generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 1, models = "v-exp", params = "estimated", title = "Estimated", ymin = 2, ymax =6)
singleParticipant_v(participant = 2, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 2, models = "v-exp", params = "estimated", ymin = 2, ymax =6)
par(mfrow = c(2,2))
singleParticipant_v(participant = 20, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 20, models = "v-exp", params = "estimated", ymin = 2, ymax =6)
singleParticipant_v(participant = 30, models = "v-exp", params = "generated", ymin = 2, ymax =6)
singleParticipant_v(participant = 30, models = "v-exp", params = "estimated", ymin = 2, ymax =6)
correlations = c(
cor(allGenParams$a, allMeanTheta$a),
cor(allGenParams$ter, allMeanTheta$t0),
#cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$v.start, allMeanTheta$v.start),
cor(allGenParams$v.asym+allGenParams$v.start, allMeanTheta$v.asym+allGenParams$v.start),
cor(allGenParams$v.rate, allMeanTheta$v.rate)
)
correlations
names(correlations) = colnames(allMeanTheta)
correlations
correlations = c(
cor(allGenParams$a, allMeanTheta$a),
cor(allGenParams$ter, allMeanTheta$t0),
#cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$v.start, allMeanTheta$v.start),
cor(allGenParams$v.asym+allGenParams$v.start, allMeanTheta$v.asym+allMeanTheta$v.start),
cor(allGenParams$v.rate, allMeanTheta$v.rate)
)
names(correlations) = colnames(allMeanTheta)
correlations
par(mfrow = c(2,3))
plot(allGenParams$v.start, allMeanTheta$v.start, ylab = "Estimated", xlab = "Generated", main = "v.start")
plot(allGenParams$v.asym+allGenParams$v.start, allMeanTheta$v.asym+allMeanTheta+allMeanTheta$v.start, ylab = "Estimated", xlab = "Generated", main = "v.asym")
par(mfrow = c(2,3))
plot(allGenParams$v.start, allMeanTheta$v.start, ylab = "Estimated", xlab = "Generated", main = "v.start")
plot(allGenParams$v.asym+allGenParams$v.start, allMeanTheta$v.asym+allMeanTheta$v.start, ylab = "Estimated", xlab = "Generated", main = "v.asym")
plot(allGenParams$v.rate, allMeanTheta$v.rate, ylab = "Estimated", xlab = "Generated", main = "v.rate")
plot(allGenParams$a, allMeanTheta$a, ylab = "Estimated", xlab = "Generated", main = "a")
plot(allGenParams$ter, allMeanTheta$t0, ylab = "Estimated", xlab = "Generated", main = "t0")
plot(allGenParams$z, allMeanTheta$z, ylab = "Estimated", xlab = "Generated", main = "z")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(here)
setwd(here())
# Set up empty data frames for generated parameters (allGenParamas) and estimated parameters (allMeanTheta)
allGenParams=NULL
allMeanTheta=NULL
#Define how many data sets to use
n = 100
model = "a-exp"
for (p in 1:n) { #Loop in each data set
load(paste0("Recovery/",model,"/Fits_recovery/P",p,"_",model,".RData"))
#load(paste0("Recovery/Datasets/RECOVERY_DATA-DIFF_LHS-",p,".Rdata"))
#Rearrange and take out unnecessary values from the generated parameters
tmp = c(genParams[,1])
#Create a large data set which combines the mean generated parameters from all data sets
allGenParams=rbind(allGenParams,tmp)
#Create a large data set which combines the mean estimated parameters from all data sets
allMeanTheta=rbind(allMeanTheta,apply(theta,2,mean))
}
allGenParams= as.data.frame(allGenParams)
allMeanTheta= as.data.frame(allMeanTheta)
correlations = c(
cor(allGenParams$v, allMeanTheta$v),
cor(allGenParams$ter, allMeanTheta$t0),
#cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$a.start+allGenParams$a.asym, allMeanTheta$a.start+allMeanTheta$a.asym),
cor(allGenParams$a.asym, allMeanTheta$a.asym),
cor(allGenParams$a.rate, allMeanTheta$a.rate)
)
correlations = c(
cor(allGenParams$v, allMeanTheta$v),
cor(allGenParams$ter, allMeanTheta$t0),
#cor(allGenParams$z, allMeanTheta$z),
cor(allGenParams$a.start+allGenParams$a.asym, allMeanTheta$a.start+allMeanTheta$a.asym),
cor(allGenParams$a.asym, allMeanTheta$a.asym),
cor(allGenParams$a.rate, allMeanTheta$a.rate)
)
names(correlations) = colnames(allMeanTheta)
correlations
par(mfrow = c(2,3))
plot(allGenParams$a.start+allGenParams$a.asym, allMeanTheta$a.start+allMeanTheta$a.asym, ylab = "Estimated", xlab = "Generated", main = "a.start")
plot(allGenParams$a.asym+allGenParams$v.start, allMeanTheta$a.asym+allMeanTheta$v.start, ylab = "Estimated", xlab = "Generated", main = "a.asym")
par(mfrow = c(2,3))
plot(allGenParams$a.start+allGenParams$a.asym, allMeanTheta$a.start+allMeanTheta$a.asym, ylab = "Estimated", xlab = "Generated", main = "a.start")
plot(allGenParams$a.asym, allMeanTheta$a.asym, ylab = "Estimated", xlab = "Generated", main = "a.asym")
plot(allGenParams$a.rate, allMeanTheta$a.rate, ylab = "Estimated", xlab = "Generated", main = "a.rate")
plot(allGenParams$v, allMeanTheta$v, ylab = "Estimated", xlab = "Generated", main = "a")
plot(allGenParams$ter, allMeanTheta$t0, ylab = "Estimated", xlab = "Generated", main = "t0")
plot(allGenParams$z, allMeanTheta$z, ylab = "Estimated", xlab = "Generated", main = "z")
singleParticipant_a = function(participant,
trials = 1000,
ymin = 1,
ymax = 7,
models = c(
"simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp",
"v-delayed-pow",
"v-delayed-exp",
"v-a-exp"
)) {
plot(-1,-1,ylim = c(ymin,ymax),xlab = "trial",ylab = "a", xlim = c(0,trials), main = paste0(participant))
for(model in models){
load(here(paste("Recovery/",model,"/Fits_recovery/P", participant,"_",model,".Rdata", sep = "")))
if (params == "generated"){
x = as.vector(genParams)
names(x) = rownames(genParams)
} else if (params == "estimated"){
x =  apply(theta, 2, mean)
}
if (model == "a-power"){
threshold = x["a.asym"]+x["a.start"]*data$Trial^(-x["a.rate"])
} else if (model == "a-exp" | model == "v-a-exp"){
threshold = x["a.asym"]+x["a.start"]*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = rep(x["a"],length(data$Trial))
} else if (model == "a-delayed-power"){
threshold = x["a.asym"]+x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+data$Trial^(x["a.rate"])))
} else if (model == "a-delayed-exp") {
x["a.asym"]+(x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+exp(x["a.rate"]*data$Trial))))
} else if (model == "a-exp-mir"){
threshold = (x["a.asym"]+x["a.start"])-x["a.start"]*exp(x["a.rate"]*data$Trial)
}
lines(data$Trial,threshold)
}
}
singleParticipant_a(participant = 1, models = "v-exp", params = "generated", title = "Generated", ymin = 2, ymax =6)
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated", ymin = 2, ymax =6)
singleParticipant_a = function(participant,
trials = 1000,
ymin = 1,
ymax = 7,
models = c(
"simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp",
"v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
params,
title
)) {
plot(-1,-1,ylim = c(ymin,ymax),xlab = "trial",ylab = "a", xlim = c(0,trials), main = paste0(participant))
for(model in models){
load(here(paste("Recovery/",model,"/Fits_recovery/P", participant,"_",model,".Rdata", sep = "")))
if (params == "generated"){
x = as.vector(genParams)
names(x) = rownames(genParams)
} else if (params == "estimated"){
x =  apply(theta, 2, mean)
}
if (model == "a-power"){
threshold = x["a.asym"]+x["a.start"]*data$Trial^(-x["a.rate"])
} else if (model == "a-exp" | model == "v-a-exp"){
threshold = x["a.asym"]+x["a.start"]*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = rep(x["a"],length(data$Trial))
} else if (model == "a-delayed-power"){
threshold = x["a.asym"]+x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+data$Trial^(x["a.rate"])))
} else if (model == "a-delayed-exp") {
x["a.asym"]+(x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+exp(x["a.rate"]*data$Trial))))
} else if (model == "a-exp-mir"){
threshold = (x["a.asym"]+x["a.start"])-x["a.start"]*exp(x["a.rate"]*data$Trial)
}
lines(data$Trial,threshold)
}
}
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated", ymin = 2, ymax =6)
singleParticipant_a = function(participant,
trials = 1000,
ymin = 1,
ymax = 7,
models = c(
"simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp",
"v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
params,
Title
)) {
plot(-1,-1,ylim = c(ymin,ymax),xlab = "trial",ylab = "a", xlim = c(0,trials), main = paste0(participant))
for(model in models){
load(here(paste("Recovery/",model,"/Fits_recovery/P", participant,"_",model,".Rdata", sep = "")))
if (params == "generated"){
x = as.vector(genParams)
names(x) = rownames(genParams)
} else if (params == "estimated"){
x =  apply(theta, 2, mean)
}
if (model == "a-power"){
threshold = x["a.asym"]+x["a.start"]*data$Trial^(-x["a.rate"])
} else if (model == "a-exp" | model == "v-a-exp"){
threshold = x["a.asym"]+x["a.start"]*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = rep(x["a"],length(data$Trial))
} else if (model == "a-delayed-power"){
threshold = x["a.asym"]+x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+data$Trial^(x["a.rate"])))
} else if (model == "a-delayed-exp") {
x["a.asym"]+(x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+exp(x["a.rate"]*data$Trial))))
} else if (model == "a-exp-mir"){
threshold = (x["a.asym"]+x["a.start"])-x["a.start"]*exp(x["a.rate"]*data$Trial)
}
lines(data$Trial,threshold)
}
}
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated", ymin = 2, ymax =6)
singleParticipant_a = function(participant,
trials = 1000,
ymin = 1,
ymax = 7,
models = c(
"simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp",
"v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
),
params,
title) {
plot(-1,-1,ylim = c(ymin,ymax),xlab = "trial",ylab = "a", xlim = c(0,trials), main = paste0(participant))
for(model in models){
load(here(paste("Recovery/",model,"/Fits_recovery/P", participant,"_",model,".Rdata", sep = "")))
if (params == "generated"){
x = as.vector(genParams)
names(x) = rownames(genParams)
} else if (params == "estimated"){
x =  apply(theta, 2, mean)
}
if (model == "a-power"){
threshold = x["a.asym"]+x["a.start"]*data$Trial^(-x["a.rate"])
} else if (model == "a-exp" | model == "v-a-exp"){
threshold = x["a.asym"]+x["a.start"]*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = rep(x["a"],length(data$Trial))
} else if (model == "a-delayed-power"){
threshold = x["a.asym"]+x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+data$Trial^(x["a.rate"])))
} else if (model == "a-delayed-exp") {
x["a.asym"]+(x["a.start"]*((x["a.delay"]+1)/(x["a.delay"]+exp(x["a.rate"]*data$Trial))))
} else if (model == "a-exp-mir"){
threshold = (x["a.asym"]+x["a.start"])-x["a.start"]*exp(x["a.rate"]*data$Trial)
}
lines(data$Trial,threshold)
}
}
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated", ymin = 2, ymax =6)
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated")
par(mfrow = c(2,2))
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated")
singleParticipant_v(participant = 1, models = "a-exp", params = "estimated", title = "Estimated")
par(mfrow = c(2,2))
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated")
singleParticipant_a(participant = 1, models = "a-exp", params = "estimated", title = "Estimated")
singleParticipant_a(participant = 2, models = "a-exp", params = "generated")
singleParticipant_a(participant = 2, models = "a-exp", params = "estimated")
par(mfrow = c(2,2))
singleParticipant_a(participant = 1, models = "a-exp", params = "generated", title = "Generated", ymin = 0, ymax = 3)
singleParticipant_a(participant = 1, models = "a-exp", params = "estimated", title = "Estimated", ymin = 0, ymax = 3)
singleParticipant_a(participant = 2, models = "a-exp", params = "generated", ymin = 0, ymax = 3)
singleParticipant_a(participant = 2, models = "a-exp", params = "estimated", ymin = 0, ymax = 3)
par(mfrow = c(2,2))
singleParticipant_a(participant = 20, models = "a-exp", params = "generated", ymin = 0, ymax = 3)
singleParticipant_a(participant = 20, models = "a-exp", params = "estimated", ymin = 0, ymax = 3)
singleParticipant_a(participant = 30, models = "a-exp", params = "generated", ymin = 0, ymax = 3)
singleParticipant_a(participant = 30, models = "a-exp", params = "estimated", ymin = 0, ymax = 3)
source("~/cloudstor/ParAcT/Recovery/v-exp-rr/01_sim_v-exp.R")
source("~/cloudstor/ParAcT/Recovery/v-exp-rr/01_sim_v-exp.R")
source("~/cloudstor/ParAcT/Recovery/v-exp/01_sim_v-exp.R")
source("~/cloudstor/ParAcT/Recovery/v-exp-rr/06_runDiffModel_v-exp-rr_recovery.R")
source("~/cloudstor/ParAcT/Recovery/a-exp-rr/01_sim_a-exp.R")
source("~/cloudstor/ParAcT/Recovery/a-exp-rr/06_runDiffModel_a-exp_recovery.R")
source("~/cloudstor/ParAcT/modelling/function-simulations/exampleForNiky_expDecay_differentBumps.R")
source("~/cloudstor/ParAcT/modelling/function-simulations/exampleForNiky_expDecay_differentBumps.R")
plot(x,a+b*exp(-r*x),type="l",main="Classic Exp Decay")
plot(x,a+b*exp(-r*x2),type="l",main="Classic Exp Decay with trial unlearning")
plot(x,a+b2*exp(-r*x1),type="l",main="Classic Exp Decay with start bump")
plot(x,a-b*exp(-r*x),type="l",main="Mirrored Exp Decay")
plot(x,a-b*exp(-r*x2),type="l",main="Mirrored Exp Decay with trial unlearning")
plot(x,a-b2*exp(-r*x),type="l",main="Mirrored Exp Decay with start bump")
x
