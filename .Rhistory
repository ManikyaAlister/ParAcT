colnames(thresholdPow) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdPow) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
}
thresholdPlot("a-linear",1)
thresholdPlot("a-exp",1)
model = "a-exp"
load(here(paste("modelling/evansetal-18/06_output/P", i, "_",model,".Rdata", sep = "")))
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
i = 1
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdPow, threshold)
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdPow) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdPow) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
}
thresholdPlot("a-exp",1)
a-plot
a_plot
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdPow) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdPow) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-exp",1)
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
colnames(thresholdPow) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdPow) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
View(a_plot)
a_plot
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdPow) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-exp",1)
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdDf) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-exp",1)
thresholdPlot("a-linear",1)
thresholdPlot("a-exp",n)
ggsave(filename = here("modelling/evansetal-18/09_plots/a-exp.png"))
thresholdPlot("a-linear",n)
ggsave(filename = here("modelling/evansetal-18/09_plots/a-linear.png"))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
} else{
stop("Plot can only be either 'a-exp', 'a-power', 'a-linear', or 'simple'")
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
} else{
stop("Plot can only be either 'a-exp', 'a-power', 'a-linear', or 'simple'")
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdDf) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-pow",n)
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
} else{
stop("Plot can only be either 'a-exp', 'a-power', 'a-linear', or 'simple'")
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdDf) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-pow",n)
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-pow"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdDf) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-pow",n)
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-power"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = x["a"]
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdDf) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-exp",n)
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_a-exp.Rdata")
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_a-linear.Rdata")
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_a-exp.Rdata")
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_a-linear.Rdata")
conds = 1
nSub = 1
for(useSub in 1:nSub) {
load(here(paste("modelling/evansetal-18/06_output/P",useSub,"Simple_Model.Rdata", sep = ""))) #Loads through the datasets of each participant in nSub
simdata=list(Time=NULL,Cond=NULL,Resp=NULL) #Sets up a list with the correct headings in preparation for the simulation
tmp1=apply(weight,2,max)
tmp2=which.max(tmp1)
tmp3=which.max(weight[,tmp2])
blah=theta[tmp2,,tmp3]
for (cond in conds) { # Loops through each cue condition (congruent and incongruent)
currParams=c(blah["a"],0.5,blah["v"],blah["t0"]) # Sets the value of parameters.
names(currParams)=c("a","z","v","t0")  # Sets the names of the parameters
tmp=rdiffusion(n=10000,a=currParams["a"],v=currParams["v"],t0=currParams["t0"],z=currParams["z"]*currParams["a"]) # Runs diffusion model to generated data with estimated parameters
simdata$Time=c(simdata$Time,tmp$rt) # Populates the RT column in the simulated data
simdata$Resp=c(simdata$Resp,tmp$response) # Populates the Resp column in the simulated data
simdata$Cond=c(simdata$Cond,rep(cond,length(tmp$rt)))} # Populates the Cond column in the simulated data
sim = as.data.frame(simdata) # Convert the simulated data from List format to data frame format
save(sim, file = here(paste("data/Model-Predictions/P",useSub,"_simple.Rdata", sep = "")))
}
for(useSub in 1:nSub) {
load(here(paste("modelling/evansetal-18/06_output/P",useSub,"Simple_Model.Rdata", sep = ""))) #Loads through the datasets of each participant in nSub
simdata=list(Time=NULL,Cond=NULL,Resp=NULL) #Sets up a list with the correct headings in preparation for the simulation
tmp1=apply(weight,2,max)
tmp2=which.max(tmp1)
tmp3=which.max(weight[,tmp2])
blah=theta[tmp2,,tmp3]
for (cond in conds) { # Loops through each cue condition (congruent and incongruent)
currParams=c(blah["a"],0.5,blah["v"],blah["t0"]) # Sets the value of parameters.
names(currParams)=c("a","z","v","t0")  # Sets the names of the parameters
tmp=rdiffusion(n=10000,a=currParams["a"],v=currParams["v"],t0=currParams["t0"],z=currParams["z"]*currParams["a"]) # Runs diffusion model to generated data with estimated parameters
simdata$Time=c(simdata$Time,tmp$rt) # Populates the RT column in the simulated data
simdata$Resp=c(simdata$Resp,tmp$response) # Populates the Resp column in the simulated data
simdata$Cond=c(simdata$Cond,rep(cond,length(tmp$rt)))} # Populates the Cond column in the simulated data
sim = as.data.frame(simdata) # Convert the simulated data from List format to data frame format
save(sim, file = here(paste("modelling/evansetal-18/08_model-predictions/P",useSub,"_simple.Rdata", sep = "")))
}
for(useSub in 1:nSub) {
load(here(paste("modelling/evansetal-18/06_output/P",useSub,"_simple.Rdata", sep = ""))) #Loads through the datasets of each participant in nSub
simdata=list(Time=NULL,Cond=NULL,Resp=NULL) #Sets up a list with the correct headings in preparation for the simulation
tmp1=apply(weight,2,max)
tmp2=which.max(tmp1)
tmp3=which.max(weight[,tmp2])
blah=theta[tmp2,,tmp3]
for (cond in conds) { # Loops through each cue condition (congruent and incongruent)
currParams=c(blah["a"],0.5,blah["v"],blah["t0"]) # Sets the value of parameters.
names(currParams)=c("a","z","v","t0")  # Sets the names of the parameters
tmp=rdiffusion(n=10000,a=currParams["a"],v=currParams["v"],t0=currParams["t0"],z=currParams["z"]*currParams["a"]) # Runs diffusion model to generated data with estimated parameters
simdata$Time=c(simdata$Time,tmp$rt) # Populates the RT column in the simulated data
simdata$Resp=c(simdata$Resp,tmp$response) # Populates the Resp column in the simulated data
simdata$Cond=c(simdata$Cond,rep(cond,length(tmp$rt)))} # Populates the Cond column in the simulated data
sim = as.data.frame(simdata) # Convert the simulated data from List format to data frame format
save(sim, file = here(paste("modelling/evansetal-18/08_model-predictions/P",useSub,"_simple.Rdata", sep = "")))
}
for(useSub in 1:nSub) {
load(here(paste("modelling/evansetal-18/06_output/P",useSub,"_simple.Rdata", sep = ""))) #Loads through the datasets of each participant in nSub
simdata=list(Time=NULL,Cond=NULL,Resp=NULL) #Sets up a list with the correct headings in preparation for the simulation
tmp1=apply(weight,2,max)
tmp2=which.max(tmp1)
tmp3=which.max(weight[,tmp2])
blah=theta[tmp2,,tmp3]
for (cond in conds) { # Loops through each cue condition (congruent and incongruent)
currParams=c(blah["a"],0.5,blah["v"],blah["t0"]) # Sets the value of parameters.
names(currParams)=c("a","z","v","t0")  # Sets the names of the parameters
tmp=rdiffusion(n=10000,a=currParams["a"],v=currParams["v"],t0=currParams["t0"],z=currParams["z"]*currParams["a"]) # Runs diffusion model to generated data with estimated parameters
simdata$Time=c(simdata$Time,tmp$rt) # Populates the RT column in the simulated data
simdata$Resp=c(simdata$Resp,tmp$response) # Populates the Resp column in the simulated data
simdata$Cond=c(simdata$Cond,rep(cond,length(tmp$rt)))} # Populates the Cond column in the simulated data
sim = as.data.frame(simdata) # Convert the simulated data from List format to data frame format
save(sim, file = here(paste("modelling/evansetal-18/08_model-predictions/P",useSub,"_simple.Rdata", sep = "")))
}
thresholdPlot("a-power",n)
ggsave(filename = here("modelling/evansetal-18/09_plots/a-pow.png"))
thresholdPlot("simple",n)
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-power"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = rep(x["a"],length(trials))
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdDf) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("simple",n)
ggsave(filename = here("modelling/evansetal-18/09_plots/a-simple.png"))
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_simple.Rdata")
load("~/cloudstor/ParAcT/modelling/evansetal-18/06_output/P1_a-power.Rdata")
.libPaths()
lib = .libPaths("/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
.libPaths("enkrgns")
.libPaths()
sys.frame(1)
sys.frame(1)$ofile
?here
allAIC = data.frame()
models = c("simple","a-linear","a-power","a-exp")
colnames(allAIC) = models
allAIC = as.data.frame(matrix(ncols = length(models)))
allAIC = as.data.frame(matrix(cols = length(models)))
allAIC = as.data.frame(matrix(ncol = length(models)))
colnames(allAIC) = models
View(allAIC)
P1_simple = 1
i = 1
model = "simple"
P1_simple = 1
allAIC[i,model] = p1_simple
allAIC[i,model] = P1_simple
View(allAIC)
i = 2
allAIC[i,model] = P1_simple
View(allAIC)
models = c("simple","a-linear","a-power","a-exp")
allAIC = as.data.frame(matrix(ncol = 1+length(models)))
allBIC = as.data.frame(matrix(ncol = 1+length(models)))
colnames(allAIC) = c("Participant",models)
View(allAIC)
View(allBIC)
colnames(allBIC) = c("Participant",models)
View(allBIC)
allAIC[i,"Participant"] = i
allAIC[i,model] = AIC
allBIC[i,model = BIC]
allBIC[i,"Participant"] = i
View(allBIC)
source("~/cloudstor/ParAcT/modelling/evansetal-18/10_model-comparison.R")
rm(list=ls())
lib = .libPaths("~/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
library(here, lib.loc = lib)
n = 9
models = c("simple","a-linear","a-power","a-exp")
allAIC = as.data.frame(matrix(ncol = 1+length(models)))
allBIC = as.data.frame(matrix(ncol = 1+length(models)))
colnames(allAIC) = c("Participant",models)
colnames(allBIC) = c("Participant",models)
for (model in models){
for (i in 1:n)
load(here(paste("data/evansetal-18/derived/P",i,"_",model,"-IC.Rdata",sep = "")))
allAIC[i,"Participant"] = i
allAIC[i,model] = AIC
allBIC[i,model] = BIC
allBIC[i,"Participant"] = i
}
View(allAIC)
i = 2
load(here(paste("data/evansetal-18/derived/P",i,"_",model,"-IC.Rdata",sep = "")))
allAIC[i,"Participant"] = i
allAIC[i,model] = AIC
allBIC[i,model] = BIC
allBIC[i,"Participant"] = i
View(allAIC)
View(allBIC)
source("~/cloudstor/ParAcT/modelling/evansetal-18/10_model-comparison.R")
View(allAIC)
which.min(allBIC)
?save
source("~/cloudstor/ParAcT/modelling/evansetal-18/10_model-comparison.R")
library(ggplot2, lib.loc = lib)
n = 1
thresholdPlot = function(model,n){
thresholdDf = as.data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:n) {
load(here(paste("modelling/evansetal-18/06_output/P", i,"_",model,".Rdata", sep = "")))
trials = 1:length(data$Trial)
x =  apply(theta, 2, mean)
if (model == "a-power"){
threshold = x["a.asym"]+(x["a.asym"] + x["a.start"])*data$Trial^(-x["a.rate"])
} else if (model == "a-exp"){
threshold = x["a.asym"]+(x["a.asym"]+x["a.start"])*exp(-x["a.rate"]*data$Trial)
} else if (model == "a-linear"){
threshold = ((-x["a.b"])*data$Trial)+x["a.c"]
} else if (model == "simple") {
threshold = rep(x["a"],length(trials))
}
threshold = as.data.frame(threshold)
threshold$Participant =  i
threshold$Trial = trials
thresholdDf  = rbind(thresholdDf, threshold)
}
colnames(thresholdDf) = c("Threshold", "Participant", "Trial")
a_plot = ggplot(data = thresholdDf) +
geom_line(aes(x = Trial, y = Threshold, group = Participant)) +
theme_classic()
return(a_plot)
}
thresholdPlot("a-power",n)
a_plot
?ggsave
power = thresholdPlot("a-power",n)
ggsave(filename = here("modelling/evansetal-18/09_plots/a-pow.png"),plot = power)
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.2_v-linear.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.4_v-exp.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.3_v-power.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.2_v-linear.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.2_v-linear.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.4_v-exp.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.4_v-exp.R")
load("~/cloudstor/ParAcT/data/evansetal-18/derived/allBIC.Rdata")
View(allBIC)
load("~/cloudstor/ParAcT/data/evansetal-18/derived/allBIC.Rdata")
load("~/cloudstor/ParAcT/data/evansetal-18/derived/allAIC.Rdata")
load("~/cloudstor/ParAcT/data/evansetal-18/derived/allAIC.Rdata")
load("~/cloudstor/ParAcT/data/evansetal-18/derived/allBIC.Rdata")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.1.4_a-exp.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.1.3_a-power.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.4_v-exp.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.3_v-power.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/05_run-models/5.2.3_v-power.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/10_model-comparison.R")
source("~/cloudstor/ParAcT/modelling/evansetal-18/10_model-comparison.R")
View(allAIC)
