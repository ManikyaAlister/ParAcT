"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(0,-5)
)
mtext("BIC", side = 3, line = 1)
MMComparisonPlot =  function(ICweights,#' @param ICweights a numeric data frame/matrix/array that contains the model comparison information criterion (e.g., AIC, BIC, LOOIC) of each participant (rows) and each model (column)
models1, #' @param models1,models2 vector of column names or column numbers indicating a group of models to be compared together. Note that models1 and models2 must have the same length.
models2,
main = "Multiple Models Comparison", #'  @param main title of plot
ylab = "Probability", #'  @param xlab x axis label
xlab = "Participant", #'  @param ylab y axis label
groupNames = c("models1","models2"), #' @param groupNames character vector of length 2 describing the names of the two groups of models (to be shown on the plot legend)
inset= c(-0.5,-.25), #' @param inset determines the position of the plot legend
colours = c("darkgreen","lightblue")){ #' @param colours character vector of length 2 containing valid r graphics colours.
nModels1 = length(models1) # length of first group of models
nModels2 = length(models2) # length of second group of models
if (nModels1 != nModels2){warning("models1 and models2 are not the same length. Be careful with your interpretations")} # check to make sure there are the same amount of models in each group
nModels = nModels1+nModels2
nSubj = length(ICweights[, 1])
# draw blank plot area
plot(
x = 100,
y = 100,
xlim = c(0, nSubj+0.5),
ylim = c(0, 1),
xlab = "",
ylab = "",
main = "",
xaxt = "n",
yaxt = "n"
)
# fill with bar plot
for (i in 1:nSubj) {
use.i=i
sumThing=0
col=colours[1]
currWeight=sum(ICweights[use.i,models1])
rect(i-0.5,0,i+0.5,currWeight, border = col, col = col)
sumThing=sumThing+currWeight
col=colours[2]
currWeight=sum(ICweights[use.i,models2])
rect(i-0.5,sumThing,i+0.5,sumThing+currWeight, border = col, col = col)
sumThing=sumThing+currWeight
}
title(main = main, xlab = xlab, ylab = ylab, line = 0.2)
axis(side=2, at=seq(0,1,0.5), labels=seq(0,1,0.5),cex.axis=1.5)
axis(side=1, at=seq(0,nSubj,nSubj), labels=seq(0,nSubj,nSubj), cex.axis=1.5)
par(xpd=TRUE) # lets plot legend be drawn outside of plot area
legend("bottom",
legend = groupNames,
col = colours,
pch = 15,
#horiz = T,
cex = .7,
ncol = 2) #' @returns a stacked bar plot
}
source(here("compareMM-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
MMComparisonPlot(
wmc_AIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
groupNames = c("1 param models", "2 param models")
)
mtext("AIC", side = 3, line = 1)
MMComparisonPlot(
wmc_BIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(-0.5,-5)
)
mtext("BIC", side = 3, line = 1)
MMComparisonPlot =  function(ICweights,#' @param ICweights a numeric data frame/matrix/array that contains the model comparison information criterion (e.g., AIC, BIC, LOOIC) of each participant (rows) and each model (column)
models1, #' @param models1,models2 vector of column names or column numbers indicating a group of models to be compared together. Note that models1 and models2 must have the same length.
models2,
main = "Multiple Models Comparison", #'  @param main title of plot
ylab = "Probability", #'  @param xlab x axis label
xlab = "Participant", #'  @param ylab y axis label
groupNames = c("models1","models2"), #' @param groupNames character vector of length 2 describing the names of the two groups of models (to be shown on the plot legend)
inset= c(-0.5,-.25), #' @param inset determines the position of the plot legend
colours = c("darkgreen","lightblue")){ #' @param colours character vector of length 2 containing valid r graphics colours.
nModels1 = length(models1) # length of first group of models
nModels2 = length(models2) # length of second group of models
if (nModels1 != nModels2){warning("models1 and models2 are not the same length. Be careful with your interpretations")} # check to make sure there are the same amount of models in each group
nModels = nModels1+nModels2
nSubj = length(ICweights[, 1])
# draw blank plot area
plot(
x = 100,
y = 100,
xlim = c(0, nSubj+0.5),
ylim = c(0, 1),
xlab = "",
ylab = "",
main = "",
xaxt = "n",
yaxt = "n"
)
# fill with bar plot
for (i in 1:nSubj) {
use.i=i
sumThing=0
col=colours[1]
currWeight=sum(ICweights[use.i,models1])
rect(i-0.5,0,i+0.5,currWeight, border = col, col = col)
sumThing=sumThing+currWeight
col=colours[2]
currWeight=sum(ICweights[use.i,models2])
rect(i-0.5,sumThing,i+0.5,sumThing+currWeight, border = col, col = col)
sumThing=sumThing+currWeight
}
title(main = main, xlab = xlab, ylab = ylab, line = 0.2)
axis(side=2, at=seq(0,1,0.5), labels=seq(0,1,0.5),cex.axis=1.5)
axis(side=1, at=seq(0,nSubj,nSubj), labels=seq(0,nSubj,nSubj), cex.axis=1.5)
par(xpd=TRUE) # lets plot legend be drawn outside of plot area
legend("bottom",
legend = groupNames,
col = colours,
pch = 15,
#horiz = T,
cex = .7,
inset = inset,
ncol = 2) #' @returns a stacked bar plot
}
source(here("compareMM-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
MMComparisonPlot(
wmc_AIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
groupNames = c("1 param models", "2 param models")
)
mtext("AIC", side = 3, line = 1)
MMComparisonPlot(
wmc_BIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(-0.5,-5)
)
mtext("BIC", side = 3, line = 1)
source(here("compareMM-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
MMComparisonPlot(
wmc_AIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
groupNames = c("1 param models", "2 param models")
)
mtext("AIC", side = 3, line = 1)
MMComparisonPlot(
wmc_BIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(-0.5,-5)
)
mtext("BIC", side = 3, line = 1)
MMComparisonPlot =  function(ICweights,#' @param ICweights a numeric data frame/matrix/array that contains the model comparison information criterion (e.g., AIC, BIC, LOOIC) of each participant (rows) and each model (column)
models1, #' @param models1,models2 vector of column names or column numbers indicating a group of models to be compared together. Note that models1 and models2 must have the same length.
models2,
main = "Multiple Models Comparison", #'  @param main title of plot
ylab = "Probability", #'  @param xlab x axis label
xlab = "Participant", #'  @param ylab y axis label
groupNames = c("models1","models2"), #' @param groupNames character vector of length 2 describing the names of the two groups of models (to be shown on the plot legend)
inset= c(-0.5,-.25), #' @param inset determines the position of the plot legend
colours = c("darkgreen","lightblue")){ #' @param colours character vector of length 2 containing valid r graphics colours.
nModels1 = length(models1) # length of first group of models
nModels2 = length(models2) # length of second group of models
if (nModels1 != nModels2){warning("models1 and models2 are not the same length. Be careful with your interpretations")} # check to make sure there are the same amount of models in each group
nModels = nModels1+nModels2
nSubj = length(ICweights[, 1])
# draw blank plot area
plot(
x = 100,
y = 100,
xlim = c(0, nSubj+0.5),
ylim = c(0, 1),
xlab = "",
ylab = "",
main = "",
xaxt = "n",
yaxt = "n"
)
# fill with bar plot
for (i in 1:nSubj) {
use.i=i
sumThing=0
col=colours[1]
currWeight=sum(ICweights[use.i,models1])
rect(i-0.5,0,i+0.5,currWeight, border = col, col = col)
sumThing=sumThing+currWeight
col=colours[2]
currWeight=sum(ICweights[use.i,models2])
rect(i-0.5,sumThing,i+0.5,sumThing+currWeight, border = col, col = col)
sumThing=sumThing+currWeight
}
title(main = main, xlab = xlab, ylab = ylab, line = 0.2)
axis(side=2, at=seq(0,1,0.5), labels=seq(0,1,0.5),cex.axis=1.5)
axis(side=1, at=seq(0,nSubj,nSubj), labels=seq(0,nSubj,nSubj), cex.axis=1.5)
par(xpd=TRUE) # lets plot legend be drawn outside of plot area
legend("bottom",
legend = groupNames,
col = colours,
pch = 15,
#horiz = T,
cex = .7,
inset = inset,
ncol = 2) #' @returns a stacked bar plot
}
source(here("compareMM-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
MMComparisonPlot(
wmc_AIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
groupNames = c("1 param models", "2 param models")
)
mtext("AIC", side = 3, line = 1)
MMComparisonPlot(
wmc_BIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(-0.5,-5)
)
mtext("BIC", side = 3, line = 1)
source(here("weighted-ICs.R"))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(gridExtra)
source(here("modelling/evansetal-18/08_param-plot-functions.R"))
load(here("data/evansetal-18/derived/allAIC.Rdata"))
allAIC[,-1]
bestAIC =apply(allAIC[,-1],1,which.min)
bestAIC
load(here("data/evansetal-18/derived/allBIC.Rdata"))
allBIC[,-1]
bestBIC = apply(allBIC[,-1],1,which.min)
bestBIC
source(here("weighted-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
wmc_AIC = weightedIC(allAIC[,2:length(allAIC)])
plotWMC_AIC = plotWeightedICs(wmc_AIC, seed = 115,inset = -.29)
mtext("AIC", side = 3, line = 1)
wmc_BIC = weightedIC(allBIC[,2:length(allBIC)])
plotWMC_BIC = plotWeightedICs(wmc_BIC, seed = 115,inset = -.6)
mtext("BIC", side = 3, line = 1)
source(here("compareMM-ICs.R"))
par(omi=rep(0.1, 4), mar=c(4.5,3,1.5,2), mfrow=c(1,2))
MMComparisonPlot(
wmc_AIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
groupNames = c("1 param models", "2 param models")
)
mtext("AIC", side = 3, line = 1)
MMComparisonPlot(
wmc_BIC,
models1 = c("simple",
"a-linear",
"a-power",
"a-exp",
"a-delayed-power",
"a-delayed-exp",
"v-linear",
"v-power",
"v-exp"),
models2 = c("v-delayed-pow",
"v-delayed-exp",
"v-a-exp",
"v-dExp-a-exp",
"v-dExp-a-pow",
"v-dPow-a-exp",
"v-dPow-a-Pow"),
inset = c(-0.5,-5)
)
mtext("BIC", side = 3, line = 1)
# what were the best single models
bestAICsingle = apply(allAIC[,-c(1,12)],1,which.min)
bestAICsingle
# what were the best single models
bestBICsingle = apply(allBIC[,-c(1,12)],1,which.min)
bestBICsingle
# what was the second best model?
secBestAICsingle = apply(allAIC[,-c(1,11,12)],1,which.min)
secBestAICsingle
secBestBICsingle = apply(allBIC[,-c(1,11,12)],1,which.min)
secBestBICsingle
# what was the best a model?
best_a_AICsingle = apply(allAIC[,2:6],1,which.min)
best_a_AICsingle
best_a_BICsingle = apply(allBIC[,2:6],1,which.min)
best_a_BICsingle
# what was the next best a model?
secBest_a_AICsingle = apply(allAIC[,c(2,3,5,6)],1,which.min)
secBest_a_AICsingle
secBest_a_BICsingle = apply(allBIC[,c(2,3,5,6)],1,which.min)
secBest_a_BICsingle
bestA = c("a_exp", "a_pow")
bestB = c("v_delayed_exp","v-delayed-pow")
expand.grid(bestA,bestB)
source(here("modelling/evansetal-18/08_param-plot-functions.R"))
v_a_exp_thresh = thresholdPlot("v-a-exp", as.numeric(names(bestBIC[bestBIC == 12])))
v_a_exp_drift = driftPlot("v-a-exp", as.numeric(names(bestBIC[bestBIC == 12])))
gridExtra::grid.arrange(v_a_exp_drift,v_a_exp_thresh, top = "Participants Best Fit by Exponential Threshold + Drift Model")
v_simple = driftPlot("simple",as.numeric(names(bestBIC[bestBIC == 4])))
a_exp = thresholdPlot("a-exp",as.numeric(names(bestBIC[bestBIC == 4])))
gridExtra::grid.arrange(v_simple, a_exp, top = "Participants Best Fit by Exponential Threshold Model")
a_power = thresholdPlot("a-power",as.numeric(names(bestBIC[bestBIC == 3])))
gridExtra::grid.arrange(v_simple, a_power, top = "Participants Best Fit by Power Threshold Model")
a_simple = thresholdPlot("simple",as.numeric(names(bestBIC[bestBIC == 7])))
v_linear = driftPlot("v-linear",as.numeric(names(bestBIC[bestBIC == 7])))
gridExtra::grid.arrange(v_linear, a_simple, top = "Participants Best Fit by Linear Drift Rate Model")
bestAIC
bestBIC
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_a(1,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(2,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(3,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(4,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(5,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(6,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(7,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(8,models = c("simple","a-linear","a-power","a-exp"))
singleParticipant_a(9,models = c("simple","a-linear","a-power","a-exp"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_v(1,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(2,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(3,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(4,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(5,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(6,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(7,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(8,models = c("simple","v-linear","v-power","v-a-exp"))
singleParticipant_v(9,models = c("simple","v-linear","v-power","v-a-exp"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_a(1,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(2,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(3,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(4,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(5,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(6,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(7,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(8,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
singleParticipant_a(9,models = c("a-power","a-exp","a-delayed-power","a-delayed-exp"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,3))
singleParticipant_v(1,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(2,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(3,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(4,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(5,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(6,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(7,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(8,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
singleParticipant_v(9,models = c("v-power","v-exp","v-delayed-pow","v-delayed-exp"))
source(here("modelling/evansetal-18/11_model-fits.R"))
par(omi=rep(0.1, 4), mar=c(1.5,1.5,1.5,1.5), mfrow=c(3,4))
plotQuantiles(allSimQuantiles[[models[1]]])
plotQuantiles(allSimQuantiles[[models[2]]])
plotQuantiles(allSimQuantiles[[models[3]]])
plotQuantiles(allSimQuantiles[[models[4]]])
plotQuantiles(allSimQuantiles[[models[5]]])
plotQuantiles(allSimQuantiles[[models[6]]])
plotQuantiles(allSimQuantiles[[models[7]]])
plotQuantiles(allSimQuantiles[[models[8]]])
plotQuantiles(allSimQuantiles[[models[9]]])
plotQuantiles(allSimQuantiles[[models[10]]])
plotQuantiles(allSimQuantiles[[models[11]]])
plotQuantiles(allSimQuantiles[[models[12]]])
allBIC[,-1]
bestAIC =apply(allAIC[,-1],1,which.min)
allAIC[,-1]
load(here("data/evansetal-18/derived/allAIC.Rdata"))
allAIC[,-1]
bestAIC
bestAIC =apply(allAIC[,-1],1,which.min)
bestAIC
