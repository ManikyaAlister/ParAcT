function (project = NULL, ..., library = NULL, lockfile = NULL, 
    packages = NULL, exclude = NULL, rebuild = FALSE, repos = NULL, 
    clean = FALSE, prompt = interactive()) 
{
    renv_consent_check()
    renv_scope_error_handler()
    renv_dots_check(...)
    project <- renv_project_resolve(project)
    renv_scope_lock(project = project)
    renv_activate_prompt("restore", library, prompt, project)
    if (renv_package_checking()) 
        renv_patch_repos()
    libpaths <- renv_libpaths_resolve(library)
    lockfile <- lockfile %||% renv_lockfile_load(project = project)
    lockfile <- renv_lockfile_resolve(lockfile)
    library <- nth(libpaths, 1L)
    ensure_directory(library)
    renv_scope_libpaths(libpaths)
    if (is.character(lockfile)) 
        lockfile <- renv_lockfile_read(lockfile)
    lockfile <- renv_lockfile_override(lockfile)
    lockfile <- renv_lockfile_repair(lockfile)
    repos <- repos %||% config$repos.override() %||% lockfile$R$Repositories
    if (length(repos)) 
        renv_scope_options(repos = convert(repos, "character"))
    biocversion <- lockfile$Bioconductor$Version
    if (!is.null(biocversion)) {
        biocversion <- package_version(biocversion)
        renv_scope_options(renv.bioconductor.version = biocversion)
    }
    current <- snapshot(project = project, library = libpaths, 
        lockfile = NULL, type = "all")
    diff <- renv_lockfile_diff_packages(current, lockfile)
    diff <- renv_vector_diff(diff, if (!clean) 
        "remove")
    difflocs <- map_chr(names(diff), function(package) {
        find.package(package, lib.loc = libpaths, quiet = TRUE) %||% 
            ""
    })
    diff <- diff[!(diff == "remove" & dirname(difflocs) != library)]
    ignored <- renv_project_ignored_packages(project = project)
    diff <- diff[renv_vector_diff(names(diff), ignored)]
    packages <- setdiff(packages %||% names(diff), exclude)
    diff <- diff[intersect(names(diff), packages)]
    if (!length(diff)) {
        name <- if (!missing(library)) 
            "library"
        else "project"
        vwritef("* The %s is already synchronized with the lockfile.", 
            name)
        return(renv_restore_successful(diff, prompt, project))
    }
    if (!renv_restore_preflight(project, libpaths, diff, current, 
        lockfile, prompt)) {
        renv_report_user_cancel()
        invokeRestart("abort")
    }
    if (prompt || renv_verbose()) 
        renv_restore_report_actions(diff, current, lockfile)
    if (prompt && !proceed()) {
        renv_report_user_cancel()
        invokeRestart("abort")
    }
    records <- renv_restore_run_actions(project, diff, current, 
        lockfile, rebuild)
    renv_restore_successful(records, prompt, project)
}
<bytecode: 0x2090cf0>
<environment: namespace:renv>
Job ID           : 45748774
Cluster          : spartan
User/Project     : alisterm/punim1751
Nodes            : 1
Wall-clock time  : 00:00:31 / 7-01:00:00

Displaying overall resources usage from 2023-03-23 16:22:11 to 2023-03-23 16:22:42:

NODE            CPU#        TOT%   ( USR   / SYS   / WIO   / IDLE  ) 

spartan-bm021 : 
                CPU# 1    : 49.1   (  33.1 /  16.0 /   0.0 /  50.9 ) 


Allocated CPUs            : 1    
  CPUs with usage <25%    : 0    
  CPUs with usage <50%    : 1    
  CPUs with usage >50%    : 0    

Memory used (RAM)         : 0.0%  [4MB of 12288MB]

--------------------------------------------

